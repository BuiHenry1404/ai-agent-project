import asyncio
import os
import json
import re
from typing import Dict, Any
from dotenv import load_dotenv

# AutoGen agent chat
from autogen_agentchat.agents import AssistantAgent, UserProxyAgent
from autogen_agentchat.teams import RoundRobinGroupChat
from autogen_agentchat.conditions import TextMentionTermination
from autogen_agentchat.ui import Console

# OpenAI-compatible model client via OpenRouter
from autogen_ext.models.openai import OpenAIChatCompletionClient
from autogen_core.models import SystemMessage, UserMessage
import logging  # H√†m t·∫°o s·ª± ki·ªán Google Calendar (b·∫°n c·∫ßn c√≥ file google_calendar.py)
from google_calendar import create_events_from_plan

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
load_dotenv()


# logging.basicConfig(level=logging.INFO)


# Kh·ªüi t·∫°o model Gemini qua OpenRouter
model_client = OpenAIChatCompletionClient(
    model="gemini-1.5-flash",
    api_key=os.getenv("GEMINI_API_KEY")  # Bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY trong .env
)

# ----------------------------------------------------
# H√†m async g·ªçi model v√† x·ª≠ l√Ω k·∫øt qu·∫£ JSON
async def generate_study_plan_async(prompt: str) -> str:
    messages = [
        SystemMessage(
            content="B·∫°n l√† tr·ª£ l√Ω AI gi√∫p l·∫≠p l·ªãch h·ªçc c√° nh√¢n. "
                    "Ch·ªâ tr·∫£ v·ªÅ JSON ƒë√∫ng format ƒë∆∞·ª£c ƒë·∫∑t gi·ªØa <json>...</json>. "
                    "Kh√¥ng th√™m b·∫•t k·ª≥ l·ªùi gi·∫£i th√≠ch n√†o b√™n ngo√†i JSON."
        ),
        UserMessage(
            content=f"""T·∫°o k·∫ø ho·∫°ch h·ªçc t·∫≠p cho y√™u c·∫ßu sau: \"{prompt}\"
K·∫øt qu·∫£ ph·∫£i n·∫±m trong th·∫ª <json>...</json>. Format nh∆∞ sau:

<json>
{{
  "events": [
    {{
      "title": "T√™n bu·ªïi h·ªçc",
      "description": "Chi ti·∫øt n·ªôi dung",
      "start": "YYYY-MM-DDTHH:MM:SS+07:00",
      "end": "YYYY-MM-DDTHH:MM:SS+07:00"
    }}
  ]
}}
</json>
""",
            source="user"
        )
    ]

    try:
        response = await model_client.create(messages=messages)
        print("üì¶ DEBUG response:", response)
        content = response.content
        match = re.search(r"<json>(.*?)</json>", content, re.DOTALL)
        if match:
            json_str = match.group(1).strip()
            return json_str
        else:
            return "Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá"
    except Exception as e:
        return f"L·ªói khi g·ªçi m√¥ h√¨nh: {str(e)}"

# H√†m sync d√πng cho tool (do autogen ch·ªâ nh·∫≠n sync function)
def generate_study_plan(prompt: str) -> str:
    return asyncio.run(generate_study_plan_async(prompt))

# ----------------------------------------------------
# H√†m th√™m l·ªãch h·ªçc v√†o Google Calendar
def sync_plan_to_google_calendar(plan: Dict[str, Any]) -> str:
    try:
        create_events_from_plan(plan)
        return "‚úÖ ƒê√£ th√™m l·ªãch h·ªçc v√†o Google Calendar."
    except Exception as e:
        return f"‚ùå L·ªói khi th√™m v√†o Google Calendar: {str(e)}"

# ----------------------------------------------------
# Kh·ªüi t·∫°o AssistantAgent (AI)
study_agent = AssistantAgent(
    name="StudyAgent",
    model_client=model_client,
    tools=[generate_study_plan, sync_plan_to_google_calendar],
    system_message="""
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n l·∫≠p l·ªãch h·ªçc, s·ª≠ d·ª•ng c√¥ng c·ª• ƒë·ªÉ t·∫°o v√† ƒë·ªìng b·ªô l·ªãch h·ªçc.

QUY T·∫ÆC:
    - Khi ng∆∞·ªùi d√πng n√≥i h·ªç mu·ªën l·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p, b·∫°n **b·∫Øt bu·ªôc ph·∫£i g·ªçi h√†m generate_study_plan(prompt)** v·ªõi n·ªôi dung y√™u c·∫ßu c·ªßa h·ªç.
    - KH√îNG t·ª± t·∫°o vƒÉn b·∫£n th·ªß c√¥ng.
    - N·∫øu k·∫ø ho·∫°ch ƒë∆∞·ª£c t·∫°o h·ª£p l·ªá (tr·∫£ v·ªÅ JSON), h√£y g·ªçi sync_plan_to_google_calendar(plan).
    - Ch·ªâ tr√¨nh b√†y k·∫øt qu·∫£ sau khi g·ªçi h√†m.
    - K·∫øt th√∫c khi ng∆∞·ªùi d√πng g√µ "K·∫æT TH√öC".

C·∫§U TR√öC L·ªäCH:
M·ªói s·ª± ki·ªán c·∫ßn c√≥:
    - title
    - description
    - start (ISO 8601 format, v√≠ d·ª•: 2025-07-20T19:00:00+07:00)
    - end (ISO 8601 format)

Kh√¥ng bao gi·ªù t·ª± so·∫°n k·∫ø ho·∫°ch. H√£y lu√¥n s·ª≠ d·ª•ng c√¥ng c·ª•.
"""
)

# T·∫°o agent user nh·∫≠p tay
user_proxy = UserProxyAgent("user_proxy", input_func=input)

# T·ªï ch·ª©c h·ªôi tho·∫°i v√≤ng tr√≤n gi·ªØa 2 agent
team = RoundRobinGroupChat(
    participants=[study_agent, user_proxy],
    termination_condition=TextMentionTermination("K·∫æT TH√öC")
)

# ----------------------------------------------------
# Main
async def main():
    print("üéì AI Study Scheduler ƒë√£ s·∫µn s√†ng. G√µ 'K·∫æT TH√öC' ƒë·ªÉ tho√°t.\n")
    task = "Ch√†o b·∫°n! B·∫°n mu·ªën h·ªçc g√¨? Trong th·ªùi gian n√†o?"
    await Console(team.run_stream(task=task))

if __name__ == "__main__":
    asyncio.run(main())
