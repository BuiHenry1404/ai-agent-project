import asyncio
import os
import json
import re
from dotenv import load_dotenv

# AutoGen
from autogen_agentchat.agents import AssistantAgent, UserProxyAgent
from autogen_core.models import SystemMessage
from autogen_agentchat.teams import SelectorGroupChat
from autogen_agentchat.conditions import TextMentionTermination
from autogen_agentchat.ui import Console
# from autogen_agentchat.tools import tools

# Model client
from autogen_ext.models.openai import OpenAIChatCompletionClient

# Google Calendar sync function
from google_calendar import create_events_from_plan  # b·∫°n c·∫ßn ƒë·ªãnh nghƒ©a h√†m n√†y

# Load environment
load_dotenv()

# === MODEL CLIENT ===
model_client = OpenAIChatCompletionClient(
    model="gemini-2.5-flash",
    api_key=os.getenv("GEMINI_API_KEY")
)

# === TOOL 1: Extract JSON from content ===
def extract_json_from_response(content: str) -> dict:
    match = re.search(r"<json>(.*?)</json>", content, re.DOTALL) or \
            re.search(r"```json(.*?)```", content, re.DOTALL)
    if not match:
        raise ValueError("‚ùå Kh√¥ng t√¨m th·∫•y JSON trong ph·∫£n h·ªìi.")
    return json.loads(match.group(1).strip())

# === TOOL 2: Sync JSON to Google Calendar ===
def sync_to_google_calendar(json_data: dict) -> str:
    create_events_from_plan(json_data)
    return "‚úÖ L·ªãch h·ªçc ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô l√™n Google Calendar."

# === TOOL 3: Parser tool - parse and sync in one go ===
def parse_and_sync_schedule(text: str) -> str:
    json_data = extract_json_from_response(text)
    return sync_to_google_calendar(json_data)

# === AGENT 1: G·ª£i √Ω k·∫ø ho·∫°ch h·ªçc t·∫≠p ===
planner_agent = AssistantAgent(
    name="PlannerAgent",
    model_client=model_client,
    system_message=
            "B·∫°n l√† m·ªôt AI chuy√™n l√™n k·∫ø ho·∫°ch h·ªçc t·∫≠p.\n"
            "H√£y tr√≤ chuy·ªán v·ªõi ng∆∞·ªùi d√πng ƒë·ªÉ hi·ªÉu m·ª•c ti√™u h·ªçc c·ªßa h·ªç.\n"
            "Sau ƒë√≥ g·ª£i √Ω m·ªôt l·ªãch h·ªçc h·ª£p l√Ω, m·ªói ng√†y m·ªôt bu·ªïi h·ªçc.\n"
            "N·∫øu b·∫°n mu·ªën t·∫°o JSON k·∫ø ho·∫°ch h·ªçc th√¨ h√£y d√πng ƒë·ªãnh d·∫°ng sau v√† d·ª´ng ph·∫£n h·ªìi:\n\n"
            "<json>\n"
            "{\n  \"events\": [\n    {\n      \"title\": \"H·ªçc HTML\",\n"
            "      \"description\": \"Bu·ªïi h·ªçc ƒë·∫ßu ti√™n\",\n"
            "      \"start\": \"2025-07-25T19:00:00+07:00\",\n"
            "      \"end\": \"2025-07-25T20:30:00+07:00\"\n    }\n  ]\n}\n</json>\n\n"
        
    )


# === AGENT 2: X·ª≠ l√Ω JSON v√† ƒë·ªìng b·ªô calendar ===
calendar_agent = AssistantAgent(
    name="CalendarAgent",
    model_client=model_client,
    tools=[parse_and_sync_schedule],
    system_message=
            "B·∫°n l√† m·ªôt agent n·ªÅn, kh√¥ng giao ti·∫øp v·ªõi ng∆∞·ªùi d√πng.\n"
            "Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√°t hi·ªán JSON ch·ª©a k·∫ø ho·∫°ch h·ªçc v√† g·ªçi tool `parse_and_sync_schedule` ƒë·ªÉ ƒë·ªìng b·ªô l√™n Google Calendar.\n"
            "Kh√¥ng tr·∫£ l·ªùi hay hi·ªÉn th·ªã g√¨. Ch·ªâ x·ª≠ l√Ω r·ªìi k·∫øt th√∫c."
        )

# === USER AGENT ===
user_proxy = UserProxyAgent(name="User", input_func=input)

# === SELECTOR GROUP CHAT ===
team = SelectorGroupChat(
    participants=[user_proxy, planner_agent, calendar_agent],
    model_client=model_client,
  selector_prompt = """
B·∫°n l√† b·ªô ch·ªçn t√°c nh√¢n ph√π h·ª£p cho m·ªói v√≤ng ƒë·ªëi tho·∫°i.

Quy t·∫Øc:
1. N·∫øu tin nh·∫Øn ng∆∞·ªùi d√πng ho·∫∑c assistant ch·ª©a ƒëo·∫°n <json>...</json> ho·∫∑c ```json ... ``` ‚Üí ch·ªçn CalendarAgent.
2. N·∫øu kh√¥ng c√≥ JSON ‚Üí ch·ªçn PlannerAgent ƒë·ªÉ ti·∫øp t·ª•c tr√≤ chuy·ªán.
3. N·∫øu kh√¥ng r√µ ‚Üí ch·ªçn User ƒë·ªÉ h·ªèi th√™m.

Ch·ªâ ch·ªçn **m·ªôt** agent ph·∫£n h·ªìi m·ªói l∆∞·ª£t.
""",
    termination_condition=TextMentionTermination("K·∫æT TH√öC")
)

# === MAIN ===
async def main():
    print("üéì AI L·∫≠p L·ªãch H·ªçc ƒë√£ s·∫µn s√†ng. G√µ 'K·∫æT TH√öC' ƒë·ªÉ tho√°t.\n")
    await Console(team.run_stream(task="Ch√†o b·∫°n! B·∫°n c√≥ th·ªÉ gi√∫p g√¨ t√¥i ?"))
    print(team.chat_history.messages[-1])

if __name__ == "__main__":
    asyncio.run(main())
